{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Python Tooling for Scientists","text":""},{"location":"#coming-soon","title":"\ud83d\udea7 Coming Soon! \ud83d\udea7","text":"<p>This site will provide an opinionated guide to Python tooling for scientists.</p> <p>Why?</p> <p>Python is a great language for scientific computing, but it can be difficult to know where to start when it comes to tooling.</p> <p>The goal is to provide:</p> <ul> <li>\u2705 brief, easily digestible overviews of the most important tools</li> <li>\u2705 fully documented templates for common tasks</li> <li>\u2705 detailed, in-depth guides for those looking to go deeper</li> <li>\u2705 links to official documentation for further reading</li> </ul> <p>Feel free to look around, but please be aware that this site is still under development.  This message will be removed when the site is \"ready\" for public consumption.</p>"},{"location":"demo/","title":"Markdown Demo","text":"<p>Note</p> <p>This is a demo of the markdown syntax used in this documentation. It is not part of the site.</p> my_file.py<pre><code>import numpy as np\nimport matplotlib.pyplot as plt\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x ** 2)\nplt.plot(x, y)\nplt.show()\n</code></pre>","tags":["Formatting","Packaging"]},{"location":"demo/#subheading","title":"Subheading","text":"<p>Markdown is a lightweight markup language with plain-text-formatting syntax. Its design allows it to be converted to many output formats, but the original tool by the same name only supports HTML. Markdown is often used to format readme files, for writing messages in online discussion forums, and to create rich text using a plain text editor.</p>","tags":["Formatting","Packaging"]},{"location":"demo/#lorem-ipsum","title":"Lorem Ipsum","text":"<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>","tags":["Formatting","Packaging"]},{"location":"demo/#tables","title":"Tables","text":"Syntax Description Header Title Paragraph Text Method Description <code>GET</code>      Fetch resource <code>PUT</code>  Update resource <code>DELETE</code>      Delete resource","tags":["Formatting","Packaging"]},{"location":"demo/#lists","title":"Lists","text":"","tags":["Formatting","Packaging"]},{"location":"demo/#unordered","title":"Unordered","text":"<ul> <li>Item 1</li> <li>Item 2</li> <li>Item 2a</li> <li>Item 2b</li> </ul>","tags":["Formatting","Packaging"]},{"location":"demo/#ordered","title":"Ordered","text":"<ol> <li>Item 1</li> <li>Item 2</li> <li>Item 3<ol> <li>Item 3a</li> <li>Item 3b</li> </ol> </li> </ol>","tags":["Formatting","Packaging"]},{"location":"demo/#tabs","title":"Tabs","text":"CC++ <pre><code>#include &lt;stdio.h&gt;\nint main(void) {\nprintf(\"Hello world!\\n\");\nreturn 0;\n}\n</code></pre> <pre><code>#include &lt;iostream&gt;\nint main(void) {\nstd::cout &lt;&lt; \"Hello world!\" &lt;&lt; std::endl;\nreturn 0;\n}\n</code></pre>","tags":["Formatting","Packaging"]},{"location":"demo/#images","title":"Images","text":"","tags":["Formatting","Packaging"]},{"location":"demo/#links","title":"Links","text":"<p>http://github.com - automatic! GitHub</p>","tags":["Formatting","Packaging"]},{"location":"demo/#blockquotes","title":"Blockquotes","text":"<p>As Kanye West said:</p> <p>We're living the future so the present is our past.</p>","tags":["Formatting","Packaging"]},{"location":"demo/#inline-code","title":"Inline code","text":"<p>Run the command: <code>pip install my_package</code></p>","tags":["Formatting","Packaging"]},{"location":"demo/#task-lists","title":"Task Lists","text":"<ul> <li>[x] @mentions, #refs, links, formatting, and tags supported</li> <li>[x] list syntax required (any unordered or ordered list supported)</li> <li>[x] this is a complete item</li> <li>[ ] this is an incomplete item</li> </ul>","tags":["Formatting","Packaging"]},{"location":"demo/#emoji","title":"Emoji","text":"<p>@octocat  This PR looks great - it's ready to merge! </p>","tags":["Formatting","Packaging"]},{"location":"demo/#definition-lists","title":"Definition Lists","text":"term definition term2 definition2","tags":["Formatting","Packaging"]},{"location":"demo/#strikethrough","title":"Strikethrough","text":"<p>~~The world is flat.~~</p>","tags":["Formatting","Packaging"]},{"location":"demo/#heading-ids","title":"Heading IDs","text":"","tags":["Formatting","Packaging"]},{"location":"demo/#custom-id","title":"My Great Heading","text":"","tags":["Formatting","Packaging"]},{"location":"demo/#line-breaks","title":"Line Breaks","text":"<p>Here's a line for us to start with.</p> <p>This line is separated from the one above by two newlines, so it will be a separate paragraph.</p> <p>This line is also a separate paragraph, but... This line is only separated by a single newline, so it's a separate line in the same paragraph.</p>","tags":["Formatting","Packaging"]},{"location":"demo/#admonitions","title":"Admonitions","text":"<p>Tip</p> <p>This is a tip</p> Click to expand <p>This is hidden content</p>","tags":["Formatting","Packaging"]},{"location":"demo/#keyboard-keys","title":"Keyboard keys","text":"<p>Ctrl+Cmd+F</p>","tags":["Formatting","Packaging"]},{"location":"demo/#buttons","title":"Buttons","text":"<p>Subscribe to our newsletter</p> <p>with icons</p> <p>Send </p>","tags":["Formatting","Packaging"]},{"location":"glossary/","title":"Glossary of Python Terms","text":""},{"location":"glossary/#code-formatter","title":"Code Formatter","text":"Code Formatters like <code>black</code>, <code>yapf</code>, and <code>autopep8</code> are tools that automatically modify code to conform to a particular style guide. They help ensure that code looks consistent across multiple developers (e.g. indentation, spacing, etc.)"},{"location":"glossary/#linter","title":"Linter","text":"Linters like <code>ruff</code>, <code>flake8</code>, and <code>pylint</code> are tools that analyze code to find potential problems. They help ensure that code is correct and consistent across multiple developers (e.g. unused imports, undefined variables, etc.).  Generally speaking, linters do not modify code, but instead report problems that need to be fixed (though some linters like <code>ruff</code> or <code>autoflake</code> can also autofix some problems)."},{"location":"glossary/#build-system","title":"Build System","text":"A tool used to package a Python project into a distributable format such as a wheel or source distribution (\"sdist\"). Examples include <code>setuptools</code>, <code>poetry</code>, <code>hatchling</code>, etc."},{"location":"glossary/#python-enhancement-proposal-pep","title":"Python Enhancement Proposal (PEP)","text":"A design document providing information to the Python community, or describing a new feature for Python or its processes or environment.  PEPs provide a concise technical specification of the feature and a rationale for the feature. (See What is a PEP? for details.)"},{"location":"guides/build_system/","title":"Build systems","text":"<p>There are a few different build systems that can be used to build Python packages.  The most popular are:</p> <ul> <li>setuptools</li> <li>flit</li> <li>poetry</li> <li>hatchling</li> </ul>"},{"location":"guides/build_system/#the-build-module","title":"The build module","text":"<p>The <code>build</code> package is a simple and generic way to build Python packages. It uses the <code>build-system</code> section of <code>pyproject.toml</code> to determine how to build the package.  It is the recommended build system for Python packages that are not using setuptools.</p> <p>https://pypa-build.readthedocs.io/en/stable/</p> <p>... why don't we use <code>python setup.py</code> anymore?</p>"},{"location":"guides/pyproject/","title":"pyproject.toml","text":""},{"location":"guides/pyproject/#further-reading","title":"Further Reading","text":"<ul> <li>https://peps.python.org/pep-0518</li> <li>https://snarky.ca/what-the-heck-is-pyproject-toml</li> </ul>"},{"location":"tutorial/","title":"Python Repo Tutorial","text":"<p>This tutorial will walk you through the process of creating a simple Python repository from scratch.</p> <p>Before we add a bunch of tooling that makes our package easier to maintain over time, it's informative to see the bare minimum needed to create a Python package.</p>"},{"location":"tutorial/bare_minimum/","title":"The Bare Minimum","text":"<p>Before we add a bunch of tooling that makes our package easier to maintain over time, it's informative to see the absolute minimum needed to create a Python package.</p> <p>We need:</p> <ol> <li>a directory with a <code>pyproject.toml</code> file</li> <li>a Python module or package</li> </ol> File Structure<pre><code>my-package/\n\u251c\u2500\u2500 my_module.py\n\u2514\u2500\u2500 pyproject.toml\n</code></pre> <p>The <code>pyproject.toml</code> contains the metadata for the package, and instructions for how to build it:</p> pyproject.toml<pre><code>[build-system]\nrequires = [\"hatchling\"]  # (1)!\nbuild-backend = \"hatchling.build\"\n[project]\nname = \"my-package\"\nversion = \"0.0.1\"\n</code></pre> <ol> <li> <p>There are a few different build systems that can be used to build Python    packages. We use <code>hatchling</code> here, and discuss other options later.  For    setuptools, this section would look like:</p> <pre><code>[build-system]\nrequires = [\"setuptools\", \"wheel\"]\nbuild-backend = \"setuptools.build_meta\"\n</code></pre> </li> </ol> <p>And the python module/package contains your code:</p> <p>In fact, even the python file is optional, but then why are we here? </p> my_module.py<pre><code># your code here\nprint(\"Hello, world!\")\n</code></pre> <p>That's it!</p> <p>Really, everything beyond this is optional, and there to make your life easier as a maintainer.</p>"},{"location":"tutorial/bare_minimum/#installing","title":"Installing","text":"<p>With that, you already have a Python package that can be installed locally with <code>pip</code>:</p> <pre><code># run from inside the my-package directory\npip install .\n\n# run from anywhere\npip install /path/to/my-package\n</code></pre>"},{"location":"tutorial/bare_minimum/#publishing","title":"Publishing","text":"<p>And even deploying to PyPI is just a couple lines away:</p> <pre><code># run from inside the my-package directory\npip install build\npython -m build\ntwine upload dist/*\n</code></pre> <p>What about conda?</p> <p>We'll cover publishing to and installing from conda later.</p>"},{"location":"tutorial/project_metadata/","title":"Project Metadata","text":""}]}